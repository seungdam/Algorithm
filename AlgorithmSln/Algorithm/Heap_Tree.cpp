#include "pch.h"

// 이진 트리
// 자식 노드가 최대 2개를 가지는 트리

// 탐색 시, 유용하게 활용가능
// 왼쪽: 현재값보다 작음 오른쪽: 현재 값보다 큼

// 매 탐색마다 후보군이 1/2로 줄어들기 때문에 log2N만큼 복잡도를 가짐
// 한쪽으로 쏠릴 경우, 균형이 깨짐에 따라 오히려 복잡도가 올라간다. O(N)
 
// AVL, red-black-tree가 이러한 현상를 방지하기 위해 재배치를 수행한다.


// Heap Tree -> 이진 트리의 한 종류
// 1. 상위 노드값 > 하위 노드값
// 2. 완전 이진 트리여야 한다.
// 3. 최하위 노드는 반드시 왼쪽부터 채워야한다.

// => 노드 개수를 알면 트리 구조를 확정할 수 있다.
// => 배열을 통해 힙 구조를 표현할 수 있음.

// 데이터 삽입
// 우선 먼저 구조에 맞게 삽입
// 1번 항목에 맞도록 부모노드와 비교해나가며 재배치

// 데이터 삭제
// 말단 노드를 루트로 옮김
// 1번 항목에 맞게 자식 노드와 교환해나가며 재배치
int main()
{

}
